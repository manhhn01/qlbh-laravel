<?php

namespace App\Http\Requests;

use App\Models\Product;
use App\Repositories\Order\OrderRepositoryInterface;
use Illuminate\Contracts\Validation\Validator;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Validation\ValidationException;

class OrderCreateRequest extends FormRequest
{
    protected $orderRepository;

    public function __construct(OrderRepositoryInterface $orderRepository, $query = [], array $request = [], array $attributes = [], array $cookies = [], array $files = [], array $server = [], $content = null)
    {
        $this->orderRepository = $orderRepository;
        parent::__construct($query, $request, $attributes, $cookies, $files, $server, $content);
    }

    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize()
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules()
    {
        return [
            'buy_place' => ['required'],
            'status' => ['required'],
            'payment_method' => ['required'],
            'products[*][id]' => ['required'],
            'products[*][quantity]' => ['required'],
            'customer_email' => ['email', 'required_if:buy_place, "0"'],
            'deliver_to' => ['required_if:buy_place,"0"']
        ];
    }

    public function messages()
    {
        return parent::messages(); // TODO: Change the autogenerated stub
    }

    public function prepareForValidation()
    {
        $attributes = $this->all();
        $updated_products = collect($attributes["products"])
            ->map(function ($item) {
                $product = Product::find($item["product_id"]);
                if (isset($product)) {
                    $item["name"] = $product->name;
                    $item["sku"] = $product->sku;
                    $item["max_qty"] = $product->quantity;
                    $item["price"] = $product->price;
                    return $item;
                } else {
                    return [];
                }
            })->reject(function ($item) { //https://laravel.com/docs/8.x/collections#method-reject
                return empty($item);
            })->toArray();
        $this->merge(["products" => $updated_products]);
    }

    public function failedValidation(Validator $validator)
    {
        $errors = (new ValidationException($validator))->errors();
        throw new HttpResponseException(
            back()->withInput($this->all())->withErrors($errors)
        );
    }
}
